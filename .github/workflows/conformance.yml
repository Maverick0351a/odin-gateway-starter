name: Conformance & Spec

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: {}

jobs:
  conformance:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-3.11-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            pip-${{ runner.os }}-3.11-
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install mkdocs-material ruff mypy
          pip install -e packages/odin_sdk
      - name: Cache mypy & ruff
        uses: actions/cache@v4
        with:
          path: |
            .mypy_cache
            .ruff_cache
          key: mypy-ruff-${{ runner.os }}-3.11-${{ hashFiles('mypy.ini','requirements.txt') }}
          restore-keys: |
            mypy-ruff-${{ runner.os }}-3.11-
      - name: Lint (ruff)
        run: ruff check .
      - name: Type check (mypy)
        run: mypy --config-file mypy.ini packages/odin_core packages/odin_sdk --show-error-codes
      - name: Pytests
        run: pytest -q -W error::DeprecationWarning -W ignore::UserWarning
      - name: Conformance harness
        run: python -m conformance.harness --mode offline
      - name: Build spec site
        run: |
          mkdocs build -f spec/mkdocs.yml -d site
      - name: Upload spec artifact
        uses: actions/upload-artifact@v4
        with:
          name: spec-site
          path: site
      - name: Helm template (basic)
        run: |
          helm template odin ./deploy/helm/odin-gateway --set image.repository=dummy/image --set image.tag=test > /dev/null
      - name: Terraform validate (GCP)
        working-directory: deploy/terraform/gcp
        run: |
          terraform init -backend=false
          terraform validate
      - name: Terraform validate (AWS)
        working-directory: deploy/terraform/aws
        run: |
          terraform init -backend=false
          terraform validate
